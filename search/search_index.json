{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to pymeineta's Documentation","text":""},{"location":"#overview","title":"Overview","text":"<p>pymeineta is an asynchronous Python library designed to interact seamlessly with the MeinETA REST API. It provides functionalities such as reading sensor values from the boiler and setting various parameters, making it a robust tool for managing and monitoring MeinETA devices within your Python projects.</p>"},{"location":"#table-of-contents","title":"Table of Contents","text":"<ul> <li>Usage</li> <li>API Reference</li> <li>Development Guide</li> <li>FAQ</li> </ul>"},{"location":"api_reference/","title":"API Reference","text":""},{"location":"api_reference/#meinetaclient-class","title":"<code>MeinETAClient</code> Class","text":"<p>::: pymeineta.client</p>"},{"location":"api_reference/#initialization","title":"Initialization","text":"<pre><code>MeinETAClient(host: str, port: int)\n</code></pre> <p>Parameters:</p> <ul> <li><code>host</code>(str): The hostname or IP address of the ETA Touch device.</li> <li><code>port</code>(int): The port number for the REST API.</li> </ul>"},{"location":"api_reference/#methods","title":"Methods","text":"<p><code>test_connection()</code></p> <pre><code>async def test_connection(self) -&gt; bool\n</code></pre> <p>Tests the connectivity to the ETA Touch device.</p> <p>Returns:</p> <ul> <li><code>bool</code>:<code>True</code> if the connection is successful, <code>False</code> otherwise.</li> </ul> <p><code>get_sensor_dict()</code></p> <pre><code>async def get_sensors_dict(self) -&gt; dict\n</code></pre> <p>Retrieves a dictionary of available sensors from the MeinETA device.</p> <p>Returns:</p> <ul> <li><code>dict</code>: A dictionary containing sensor information.</li> </ul> <p><code>get_data(sensor_id: str)</code></p> <pre><code>async def get_data(self, sensor_id: str) -&gt; Tuple[Any, str]\n</code></pre> <p>Fetches the data for a specific sensor.</p> <p>Parameters:</p> <ul> <li><code>sensor_id</code>(str): The identifier for the sensor.</li> </ul> <p>Returns:</p> <ul> <li><code>Tuple[Any, str]</code>: A tuple containing the sensor value and its unit.</li> </ul> <p><code>set_parameter(parameter_name: str, value: Any)</code></p> <pre><code>async def set_parameter(self, parameter_name: str, value: Any) -&gt; bool\n</code></pre> <p>Sets a parameter on the ETA Touch device.</p> <p>Parameters:</p> <ul> <li><code>parameter_name</code>(str): The name of the parameter to set.</li> <li><code>value</code> (Any): The value to set for the parameter.</li> </ul> <p>Returns:</p> <ul> <li><code>bool</code>: <code>True</code> if the parameter was set successfully, <code>False</code> otherwise.</li> </ul>"},{"location":"dev_guide/","title":"Developer Guide","text":"<p>This document provides information for contributors and maintainers of pymeineta.</p>"},{"location":"dev_guide/#development-setup","title":"Development Setup","text":"<ol> <li>Clone the repository:</li> </ol> <p><code>bash    git clone https://github.com/Lechtob/pymeineta.git</code></p> <ol> <li> <p>Create and activate a virtual environment:</p> <p><code>bash python -m venv .venv source .venv/bin/activate  # Linux/Mac .venv\\Scripts\\activate     # Windows</code></p> </li> <li> <p>Install dependencies:</p> <p><code>bash pip install -r requirements-dev.txt</code></p> </li> </ol>"},{"location":"dev_guide/#branchin-strategy","title":"Branchin Strategy","text":"<ul> <li>main branch: Contains the latest stable release code.</li> <li>dev branch: Active development and integration.</li> <li>feature/: Feature branches for new functionalities. <li>bugfix/: Bugfix branches."},{"location":"dev_guide/#tests-coverage","title":"Tests &amp; Coverage","text":"<ul> <li> <p>Run tests locally:</p> <p><code>bash pytest --cov=pymeineta</code></p> </li> <li> <p>View coverage reports in the terminal or an HTML report.</p> </li> </ul>"},{"location":"dev_guide/#release-process","title":"Release Process","text":"<ol> <li>Bump the version (Semantic Versioning) in <code>pyproject.toml</code>.</li> <li> <p>Commit and tag the new version:</p> <p><code>bash git commit -m \"Bump version to 1.2.3\" git tag v1.2.3 git push origin v1.2.3</code></p> </li> <li> <p>GitHub Action triggers an automated build and deploy to PyPI.</p> </li> </ol>"},{"location":"faq/","title":"FAQ","text":""},{"location":"faq/#how-do-i-obtain-an-api-key","title":"How do I obtain an API key?","text":"<p>To obtain an API key, please contact your MeinETA device administrator or refer to the MeinETA documentation.</p>"},{"location":"faq/#which-python-versions-are-supported","title":"Which Python versions are supported?","text":"<p>pymeineta supports Python 3.8 and above.</p>"},{"location":"faq/#how-do-i-handle-sensitive-information-like-api-keys","title":"How do I handle sensitive information like API keys?","text":"<p>It's recommended to use environment variables to manage sensitive information. Refer to the Configuration section for more details.</p>"},{"location":"faq/#how-can-i-contribute-to-pymeineta","title":"How can I contribute to pymeineta?","text":"<p>Please refer to our Contributing guidelines for information on how to get started.</p>"},{"location":"faq/#where-can-i-report-bugs-or-request-features","title":"Where can I report bugs or request features?","text":"<p>You can report bugs or request features by opening an Issue on GitHub.</p>"},{"location":"usage/","title":"Usage","text":""},{"location":"usage/#quick-start","title":"Quick Start","text":"<p>Get up and running with pymeineta in just a few steps:</p> <ol> <li>Install the library (see Installation).</li> <li>Obtain your API key from MeinETA.</li> <li>Initialize the client and start interacting with your MeinETA devices.</li> </ol>"},{"location":"usage/#basic-example","title":"Basic Example","text":"<pre><code>import asyncio\nfrom pymeineta import MeinETAClient\n\nasync def main():\n    client = MeinETAClient(host=\"192.168.1.100\", port=8080, api_key=\"YOUR_API_KEY\")\n\n    # Test connection\n    if await client.test_connection():\n        print(\"Connection successful!\")\n\n    # Retrieve sensor data\n    sensors = await client.get_sensors_dict()\n    print(\"Available Sensors:\", sensors)\n\n    # Fetch sensor value\n    value, unit = await client.get_data(\"120/10101/0/0/12197\")\n    print(f\"Sensor Value: {value} {unit}\")\n\n    # Set a parameter (example)\n    success = await client.set_parameter(\"temperature_threshold\", 75)\n    if success:\n        print(\"Parameter set successfully!\")\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n</code></pre>"},{"location":"usage/#advanced-features","title":"Advanced Features","text":""},{"location":"usage/#asynchronous-communication","title":"Asynchronous Communication","text":"<p>pymeineta leverages <code>aiohttp</code> for non-blocking interactions, ensuring efficient communication in asynchronous applications.</p> <pre><code>import asyncio\nfrom pymeineta import MeinETAClient\n\nasync def fetch_sensor_data():\n    client = MeinETAClient(host=\"192.168.1.100\", port=8080, api_key=\"YOUR_API_KEY\")\n    await client.connect()\n\n    data = await client.get_data(\"sensor_id\")\n    await client.disconnect()\n    return data\n\nasync def main():\n    sensor_data = await fetch_sensor_data()\n    print(sensor_data)\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n</code></pre>"},{"location":"usage/#error-handling","title":"Error Handling","text":"<p>Utilize custom exceptions for robust error management, ensuring your application can gracefully handle issues.</p> <pre><code>from pymeineta import MeinETAClient, ConnectionError, DataError\n\nasync def safe_fetch():\n    client = MeinETAClient(host=\"192.168.1.100\", port=8080, api_key=\"YOUR_API_KEY\")\n    try:\n        await client.connect()\n        data = await client.get_data(\"sensor_id\")\n    except ConnectionError:\n        print(\"Failed to connect to MeinETA device!\")\n    except DataError:\n        print(\"Error retrieving sensor data!\")\n    finally:\n        await client.disconnect()\n\nasyncio.run(safe_fetch())\n</code></pre>"}]}